  /* verilator public_on*/

  //general settings
  parameter p_reset_vector    = 32'hf0000000,
  parameter p_num_gpios       = 8,

  //chip ids
  parameter p_manufacturer_id = 12'h456,
  parameter p_product_id      = 8'h01,

  // -----------------------------------------------
  // imem/dmem depth (power of two)
  parameter p_imem_depth_pw2  = 10,           //! depth of the instruction memory in power of two (number of 32-bit words)
  parameter p_dmem_depth_pw2  = 10,           //! depth of the data memory in power of two (number of 32-bit words)

  //imem/dmem init files (simulations)
  parameter p_imem_init       = "firmware/imem.hex",
  parameter p_dmem_init       = "firmware/dmem.hex",

  parameter p_counters        = 0,            //! use counters (mcycle, minstret, mtime)
  parameter p_ext_rvzicsr     = 0,            //! use RV32Zicsr extension (control and status registers)
  // -----------------------------------------------
  parameter p_ext_rve         = 0,            //! use RV32E extension (reduces the integer register count to 16)
  parameter p_ext_rvc         = 0,            //! use RV32C extension (compressed instructions)
  parameter p_ext_rvm         = 1,            //! use RV32M extension (multiplication and division)
  parameter p_ext_custom      = 0,            //! use custom extension


  parameter p_mul_fast        = 1,            //! fast mul
  parameter p_mul_1_cycle     = 0,            //! one cycle mul

  parameter p_pipeline        = 0,

  // pipeline settings:
  parameter p_stage_IF        = 1,
  parameter p_stage_IC        = 0,
  parameter p_stage_ID        = 1,
  parameter p_stage_RF        = 1,
  parameter p_stage_EX        = 1,
  parameter p_stage_MA        = 1,
  parameter p_stage_WB        = 1,

  // non pipeline settings:
  parameter p_prefetch_buf    = 0,            //! use a prefetch buffer
  parameter p_decode_buf      = 1,            //! add buffers to decode stage outputs
  parameter p_rf_sp           = 0,            //! register file is a single port ram
  parameter p_rf_read_buf     = 1,            //! register file has synchronous read
  parameter p_branch_buf      = 0,            //! add buffers to mem stage inputs
  parameter p_mem_buf         = 0,            //! add buffers to write back stage inputs
  parameter p_wb_buf          = 1,            //! add buffers to alu comp outputs (+1 cycle for conditionnal branches)

  //implementation customization
  parameter p_imem_sram       = 1,            //! implement instruction memory in sram?
  parameter p_dmem_sram       = 1,            //! implement data memory in sram?
  parameter p_rf_sram         = 0,            //! implement regfile in sram? warning: 'p_rf_read_buf' must be '1'

  //security
  parameter p_wait_for_ack    = 0             //! wait for data bus acknowledgement. warning: gets stuck if addressing a non responding memory + reduces fax frequency when activated

  /* verilator public_off*/
